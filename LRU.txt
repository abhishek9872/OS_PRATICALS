#include <stdio.h>

#define FRAME_COUNT 3 // Define the number of frames

// LRU Page Replacement Function
void lruPageReplacement(int pages[], int n) {
    int frames[FRAME_COUNT];
    int lastUsed[FRAME_COUNT]; // Tracks the last used time for each frame
    int pageFaults = 0;

    // Step 1: Initialize frames and lastUsed arrays to -1
    for (int i = 0; i < FRAME_COUNT; i++) {
        frames[i] = -1;      // -1 indicates an empty frame
        lastUsed[i] = -1;    // -1 indicates no usage yet
    }

    printf("LRU Pages\tFrames\n");
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int pageFound = 0;

        // Step 2: Check if the current page is already in a frame
        for (int j = 0; j < FRAME_COUNT; j++) {
            if (frames[j] == page) {
                pageFound = 1; // Page is already in a frame
                lastUsed[j] = i; // Update its last used time
                break;
            }
        }

        // Step 3: If page is not found, a page fault occurs
        if (!pageFound) {
            int lruIndex = 0; // Index of the LRU page to be replaced

            // Step 4: Find the Least Recently Used (LRU) page
            for (int j = 1; j < FRAME_COUNT; j++) {
                if (lastUsed[j] < lastUsed[lruIndex]) {
                    lruIndex = j; // Update index of the least recently used page
                }
            }

            // Step 5: Replace the LRU page with the new page
            frames[lruIndex] = page;
            lastUsed[lruIndex] = i; // Update its last used time
            pageFaults++; // Increment the page fault counter
        }

        // Step 6: Print the current page and frame state
        printf("%d\t\t", page);
        for (int j = 0; j < FRAME_COUNT; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]); // Print frame contents
            } else {
                printf("- "); // Empty frame
            }
        }
        printf("\n");
    }

    // Step 7: Print the total page faults and hit/miss frequencies
    printf("Total Page Faults (LRU): %d\n", pageFaults);
    int hits = n - pageFaults; // Hits are total references minus faults
    printf("Fault Frequency: %.2f%%\n", (float)pageFaults / n * 100);
    printf("Hit Frequency: %.2f%%\n", (float)hits / n * 100);
}

// Main Function
int main() {
    int n;

    // Input number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int pages[n];

    // Input the page reference string
    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    // Call LRU Page Replacement
    lruPageReplacement(pages, n);

    return 0;
}
