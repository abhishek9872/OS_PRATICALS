#include <stdio.h>

struct process {
    int name;
    int arrival;
    int burst;
    int tat;
    int waiting;
};

int main() {
    int n;
    float avgTAT = 0;  // Initialize average turnaround time
    float avgWT = 0;   // Initialize average waiting time

    // Taking input
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    if (n <= 0) {
        printf("Invalid number of processes.\n");
        return 1;  // Exit if the number of processes is zero or negative
    }

    struct process arr[n];
    for (int i = 0; i < n; i++) {
        printf("Enter process %d details:\n", i + 1);
        printf("Process ID: ");
        scanf("%d", &arr[i].name);
        printf("Arrival Time: ");
        scanf("%d", &arr[i].arrival);
        printf("Burst Time: ");
        scanf("%d", &arr[i].burst);
    }

    // Printing input
    printf("\nProcesses entered:\n");
    printf("Pr\tArr\tBurst\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\n", arr[i].name, arr[i].arrival, arr[i].burst);
    }

    // Sorting processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i].arrival > arr[j].arrival) {
                struct process temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }

    printf("\nProcesses sorted by arrival time:\n");
    printf("Pr\tArr\tBurst\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\n", arr[i].name, arr[i].arrival, arr[i].burst);
    }

    // Calculating Turnaround Time (TAT) and Waiting Time
    arr[0].tat = arr[0].arrival + arr[0].burst;  // First process TAT is its burst time
    for (int i = 1; i < n; i++) {
        // Check if the previous process finished before the current process arrives
        if (arr[i - 1].tat >= arr[i].arrival) {
            arr[i].tat = arr[i - 1].tat + arr[i].burst;
        } else {
            arr[i].tat = arr[i].arrival + arr[i].burst;
        }
    }

    // Calculate Waiting Time and accumulate TAT and WT for averages
    for (int i = 0; i < n; i++) {
        arr[i].tat -= arr[i].arrival;  // Turnaround time
        arr[i].waiting = arr[i].tat - arr[i].burst;  // Waiting time
        avgTAT += arr[i].tat;
        avgWT += arr[i].waiting;
    }

    avgTAT /= n;
    avgWT /= n;

    // Printing output
    printf("\nFinal Process Details:\n");
    printf("Pr\tArr\tBurst\tTAT\tWait\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", arr[i].name, arr[i].arrival, arr[i].burst, arr[i].tat, arr[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);
    printf("Average Waiting Time: %.2f\n", avgWT);

    return 0;
}
